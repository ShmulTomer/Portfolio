{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport windowExists from '../../helpers/window-exists';\nimport defaultTheme from '../../theme/default';\nexport const ThemeContext = createContext({\n  theme: defaultTheme\n});\nexport const ThemeProvider = _ref => {\n  let {\n    children,\n    value\n  } = _ref;\n  return _jsx(ThemeContext.Provider, {\n    value: value,\n    children: children\n  });\n};\nexport function useTheme() {\n  return useContext(ThemeContext);\n}\nexport const useThemeMode = usePreferences => {\n  const [mode, setModeState] = useState('light');\n\n  const savePreference = mode => localStorage.setItem('theme', mode);\n\n  const getPreference = () => localStorage.getItem('theme') || getPrefersColorScheme();\n\n  const userPreferenceIsDark = () => window.matchMedia?.('(prefers-color-scheme: dark)').matches;\n\n  const getPrefersColorScheme = () => userPreferenceIsDark() ? 'dark' : 'light';\n\n  const toggleMode = () => {\n    const newMode = mode === 'dark' ? 'light' : 'dark';\n    setMode(newMode);\n    setModeState(newMode);\n  };\n\n  const setMode = mode => {\n    savePreference(mode);\n\n    if (!windowExists()) {\n      return;\n    }\n\n    if (mode === 'dark') {\n      document.documentElement.classList.add('dark');\n      return;\n    }\n\n    document.documentElement.classList.remove('dark');\n  };\n\n  if (usePreferences) {\n    useEffect(() => setModeState(getPreference()), []);\n    useEffect(() => setMode(mode), [mode]);\n  }\n\n  return [mode, setModeState, toggleMode];\n};","map":{"version":3,"names":["jsx","_jsx","createContext","useContext","useEffect","useState","windowExists","defaultTheme","ThemeContext","theme","ThemeProvider","children","value","Provider","useTheme","useThemeMode","usePreferences","mode","setModeState","savePreference","localStorage","setItem","getPreference","getItem","getPrefersColorScheme","userPreferenceIsDark","window","matchMedia","matches","toggleMode","newMode","setMode","document","documentElement","classList","add","remove"],"sources":["/Users/tomershmul/Documents/Portfolio/node_modules/flowbite-react/lib/esm/components/Flowbite/ThemeContext.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport windowExists from '../../helpers/window-exists';\nimport defaultTheme from '../../theme/default';\nexport const ThemeContext = createContext({\n    theme: defaultTheme,\n});\nexport const ThemeProvider = ({ children, value }) => {\n    return _jsx(ThemeContext.Provider, { value: value, children: children });\n};\nexport function useTheme() {\n    return useContext(ThemeContext);\n}\nexport const useThemeMode = (usePreferences) => {\n    const [mode, setModeState] = useState('light');\n    const savePreference = (mode) => localStorage.setItem('theme', mode);\n    const getPreference = () => localStorage.getItem('theme') || getPrefersColorScheme();\n    const userPreferenceIsDark = () => window.matchMedia?.('(prefers-color-scheme: dark)').matches;\n    const getPrefersColorScheme = () => (userPreferenceIsDark() ? 'dark' : 'light');\n    const toggleMode = () => {\n        const newMode = mode === 'dark' ? 'light' : 'dark';\n        setMode(newMode);\n        setModeState(newMode);\n    };\n    const setMode = (mode) => {\n        savePreference(mode);\n        if (!windowExists()) {\n            return;\n        }\n        if (mode === 'dark') {\n            document.documentElement.classList.add('dark');\n            return;\n        }\n        document.documentElement.classList.remove('dark');\n    };\n    if (usePreferences) {\n        useEffect(() => setModeState(getPreference()), []);\n        useEffect(() => setMode(mode), [mode]);\n    }\n    return [mode, setModeState, toggleMode];\n};\n"],"mappings":"AAAA,SAASA,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAO,MAAMC,YAAY,GAAGN,aAAa,CAAC;EACtCO,KAAK,EAAEF;AAD+B,CAAD,CAAlC;AAGP,OAAO,MAAMG,aAAa,GAAG,QAAyB;EAAA,IAAxB;IAAEC,QAAF;IAAYC;EAAZ,CAAwB;EAClD,OAAOX,IAAI,CAACO,YAAY,CAACK,QAAd,EAAwB;IAAED,KAAK,EAAEA,KAAT;IAAgBD,QAAQ,EAAEA;EAA1B,CAAxB,CAAX;AACH,CAFM;AAGP,OAAO,SAASG,QAAT,GAAoB;EACvB,OAAOX,UAAU,CAACK,YAAD,CAAjB;AACH;AACD,OAAO,MAAMO,YAAY,GAAIC,cAAD,IAAoB;EAC5C,MAAM,CAACC,IAAD,EAAOC,YAAP,IAAuBb,QAAQ,CAAC,OAAD,CAArC;;EACA,MAAMc,cAAc,GAAIF,IAAD,IAAUG,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,IAA9B,CAAjC;;EACA,MAAMK,aAAa,GAAG,MAAMF,YAAY,CAACG,OAAb,CAAqB,OAArB,KAAiCC,qBAAqB,EAAlF;;EACA,MAAMC,oBAAoB,GAAG,MAAMC,MAAM,CAACC,UAAP,GAAoB,8BAApB,EAAoDC,OAAvF;;EACA,MAAMJ,qBAAqB,GAAG,MAAOC,oBAAoB,KAAK,MAAL,GAAc,OAAvE;;EACA,MAAMI,UAAU,GAAG,MAAM;IACrB,MAAMC,OAAO,GAAGb,IAAI,KAAK,MAAT,GAAkB,OAAlB,GAA4B,MAA5C;IACAc,OAAO,CAACD,OAAD,CAAP;IACAZ,YAAY,CAACY,OAAD,CAAZ;EACH,CAJD;;EAKA,MAAMC,OAAO,GAAId,IAAD,IAAU;IACtBE,cAAc,CAACF,IAAD,CAAd;;IACA,IAAI,CAACX,YAAY,EAAjB,EAAqB;MACjB;IACH;;IACD,IAAIW,IAAI,KAAK,MAAb,EAAqB;MACjBe,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,CAAmCC,GAAnC,CAAuC,MAAvC;MACA;IACH;;IACDH,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,CAAmCE,MAAnC,CAA0C,MAA1C;EACH,CAVD;;EAWA,IAAIpB,cAAJ,EAAoB;IAChBZ,SAAS,CAAC,MAAMc,YAAY,CAACI,aAAa,EAAd,CAAnB,EAAsC,EAAtC,CAAT;IACAlB,SAAS,CAAC,MAAM2B,OAAO,CAACd,IAAD,CAAd,EAAsB,CAACA,IAAD,CAAtB,CAAT;EACH;;EACD,OAAO,CAACA,IAAD,EAAOC,YAAP,EAAqBW,UAArB,CAAP;AACH,CA3BM"},"metadata":{},"sourceType":"module"}